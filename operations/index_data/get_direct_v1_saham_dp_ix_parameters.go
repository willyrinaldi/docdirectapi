// Code generated by go-swagger; DO NOT EDIT.

package index_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetDirectV1SahamDpIxParams creates a new GetDirectV1SahamDpIxParams object
//
// There are no default values defined in the spec.
func NewGetDirectV1SahamDpIxParams() GetDirectV1SahamDpIxParams {

	return GetDirectV1SahamDpIxParams{}
}

// GetDirectV1SahamDpIxParams contains all the bound params for the get direct v1 saham dp ix operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDirectV1SahamDpIx
type GetDirectV1SahamDpIxParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	EndDate strfmt.Date
	/*
	  Required: true
	  In: query
	*/
	Granularity string
	/*
	  Required: true
	  In: query
	*/
	IndexCode string
	/*
	  Required: true
	  In: query
	*/
	StartDate strfmt.Date
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDirectV1SahamDpIxParams() beforehand.
func (o *GetDirectV1SahamDpIxParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndDate, qhkEndDate, _ := qs.GetOK("endDate")
	if err := o.bindEndDate(qEndDate, qhkEndDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qGranularity, qhkGranularity, _ := qs.GetOK("granularity")
	if err := o.bindGranularity(qGranularity, qhkGranularity, route.Formats); err != nil {
		res = append(res, err)
	}

	qIndexCode, qhkIndexCode, _ := qs.GetOK("indexCode")
	if err := o.bindIndexCode(qIndexCode, qhkIndexCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("startDate")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndDate binds and validates parameter EndDate from query.
func (o *GetDirectV1SahamDpIxParams) bindEndDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("endDate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("endDate", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("endDate", "query", "strfmt.Date", raw)
	}
	o.EndDate = *(value.(*strfmt.Date))

	if err := o.validateEndDate(formats); err != nil {
		return err
	}

	return nil
}

// validateEndDate carries on validations for parameter EndDate
func (o *GetDirectV1SahamDpIxParams) validateEndDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("endDate", "query", "date", o.EndDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindGranularity binds and validates parameter Granularity from query.
func (o *GetDirectV1SahamDpIxParams) bindGranularity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("granularity", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("granularity", "query", raw); err != nil {
		return err
	}
	o.Granularity = raw

	return nil
}

// bindIndexCode binds and validates parameter IndexCode from query.
func (o *GetDirectV1SahamDpIxParams) bindIndexCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("indexCode", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("indexCode", "query", raw); err != nil {
		return err
	}
	o.IndexCode = raw

	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *GetDirectV1SahamDpIxParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("startDate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("startDate", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("startDate", "query", "strfmt.Date", raw)
	}
	o.StartDate = *(value.(*strfmt.Date))

	if err := o.validateStartDate(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDate carries on validations for parameter StartDate
func (o *GetDirectV1SahamDpIxParams) validateStartDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("startDate", "query", "date", o.StartDate.String(), formats); err != nil {
		return err
	}
	return nil
}
