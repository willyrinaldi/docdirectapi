// Code generated by go-swagger; DO NOT EDIT.

package informasi_pasar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetDirectV1SahamFdrIPGetInformasiPasarDataParams creates a new GetDirectV1SahamFdrIPGetInformasiPasarDataParams object
//
// There are no default values defined in the spec.
func NewGetDirectV1SahamFdrIPGetInformasiPasarDataParams() GetDirectV1SahamFdrIPGetInformasiPasarDataParams {

	return GetDirectV1SahamFdrIPGetInformasiPasarDataParams{}
}

// GetDirectV1SahamFdrIPGetInformasiPasarDataParams contains all the bound params for the get direct v1 saham fdr IP get informasi pasar data operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDirectV1SahamFdrIPGetInformasiPasarData
type GetDirectV1SahamFdrIPGetInformasiPasarDataParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Granularity (annually/quarterly)
	  In: query
	*/
	Granularity *string
	/*Year of the data
	  In: query
	*/
	Periode *string
	/*Quarter of the data
	  In: query
	*/
	Q *string
	/*Emiten code
	  Required: true
	  In: query
	*/
	SecCode string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDirectV1SahamFdrIPGetInformasiPasarDataParams() beforehand.
func (o *GetDirectV1SahamFdrIPGetInformasiPasarDataParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qGranularity, qhkGranularity, _ := qs.GetOK("granularity")
	if err := o.bindGranularity(qGranularity, qhkGranularity, route.Formats); err != nil {
		res = append(res, err)
	}

	qPeriode, qhkPeriode, _ := qs.GetOK("periode")
	if err := o.bindPeriode(qPeriode, qhkPeriode, route.Formats); err != nil {
		res = append(res, err)
	}

	qQ, qhkQ, _ := qs.GetOK("q")
	if err := o.bindQ(qQ, qhkQ, route.Formats); err != nil {
		res = append(res, err)
	}

	qSecCode, qhkSecCode, _ := qs.GetOK("secCode")
	if err := o.bindSecCode(qSecCode, qhkSecCode, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGranularity binds and validates parameter Granularity from query.
func (o *GetDirectV1SahamFdrIPGetInformasiPasarDataParams) bindGranularity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Granularity = &raw

	return nil
}

// bindPeriode binds and validates parameter Periode from query.
func (o *GetDirectV1SahamFdrIPGetInformasiPasarDataParams) bindPeriode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Periode = &raw

	return nil
}

// bindQ binds and validates parameter Q from query.
func (o *GetDirectV1SahamFdrIPGetInformasiPasarDataParams) bindQ(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Q = &raw

	return nil
}

// bindSecCode binds and validates parameter SecCode from query.
func (o *GetDirectV1SahamFdrIPGetInformasiPasarDataParams) bindSecCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("secCode", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("secCode", "query", raw); err != nil {
		return err
	}
	o.SecCode = raw

	return nil
}
